// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_KVSTORETEST1_KVSTORE_H_
#define FLATBUFFERS_GENERATED_KVSTORETEST1_KVSTORE_H_

#include "flatbuffers/flatbuffers.h"

namespace kvstore {

struct test1;
struct test1T;

struct test1T : public flatbuffers::NativeTable {
  int64_t obj_id;
  int64_t age;
  double score;
  std::string name;
  std::string mydata;
};

struct test1 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_OBJ_ID = 4,
    VT_AGE = 6,
    VT_SCORE = 8,
    VT_NAME = 10,
    VT_MYDATA = 12
  };
  int64_t obj_id() const { return GetField<int64_t>(VT_OBJ_ID, 0); }
  bool mutate_obj_id(int64_t _obj_id) { return SetField(VT_OBJ_ID, _obj_id); }
  int64_t age() const { return GetField<int64_t>(VT_AGE, 0); }
  bool mutate_age(int64_t _age) { return SetField(VT_AGE, _age); }
  double score() const { return GetField<double>(VT_SCORE, 0.0); }
  bool mutate_score(double _score) { return SetField(VT_SCORE, _score); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  flatbuffers::String *mutable_name() { return GetPointer<flatbuffers::String *>(VT_NAME); }
  const flatbuffers::String *mydata() const { return GetPointer<const flatbuffers::String *>(VT_MYDATA); }
  flatbuffers::String *mutable_mydata() { return GetPointer<flatbuffers::String *>(VT_MYDATA); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_OBJ_ID) &&
           VerifyField<int64_t>(verifier, VT_AGE) &&
           VerifyField<double>(verifier, VT_SCORE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MYDATA) &&
           verifier.Verify(mydata()) &&
           verifier.EndTable();
  }
  void ByteOrderFields() {
    flatbuffers::ByteOrderScalar<int64_t>(GetAddressOf(VT_OBJ_ID));
    flatbuffers::ByteOrderScalar<int64_t>(GetAddressOf(VT_AGE));
    flatbuffers::ByteOrderScalar<int64_t>(GetAddressOf(VT_SCORE));
  }
  void FlatbufferOrderFields() {
    flatbuffers::FlatbufferOrderScalar<int64_t>(GetAddressOf(VT_OBJ_ID));
    flatbuffers::FlatbufferOrderScalar<int64_t>(GetAddressOf(VT_AGE));
    flatbuffers::FlatbufferOrderScalar<int64_t>(GetAddressOf(VT_SCORE));
  }
  const uint8_t *GetKey() const {
    return GetAddressOf(VT_OBJ_ID);
  }
  size_t GetKeySize() const {
    return GetAddressOf(VT_SCORE) -
      GetAddressOf(VT_OBJ_ID) +
      sizeof(double);
  }
  const uint8_t *GetValue() const {
    return GetAddressOf(VT_NAME);
  }
  size_t GetValueSize() const {
    return GetAddressOf(VT_MYDATA) -
      GetAddressOf(VT_NAME) +
      sizeof(flatbuffers::String);
  }
  std::unique_ptr<test1T> UnPack() const;
};

struct test1Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_obj_id(int64_t obj_id) { fbb_.AddElement<int64_t>(test1::VT_OBJ_ID, obj_id, 0); }
  void add_age(int64_t age) { fbb_.AddElement<int64_t>(test1::VT_AGE, age, 0); }
  void add_score(double score) { fbb_.AddElement<double>(test1::VT_SCORE, score, 0.0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(test1::VT_NAME, name); }
  void add_mydata(flatbuffers::Offset<flatbuffers::String> mydata) { fbb_.AddOffset(test1::VT_MYDATA, mydata); }
  test1Builder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  test1Builder &operator=(const test1Builder &);
  flatbuffers::Offset<test1> Finish() {
    auto o = flatbuffers::Offset<test1>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<test1> Createtest1(flatbuffers::FlatBufferBuilder &_fbb,
    int64_t obj_id = 0,
    int64_t age = 0,
    double score = 0.0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> mydata = 0) {
  test1Builder builder_(_fbb);
  builder_.add_mydata(mydata);
  builder_.add_name(name);
  builder_.add_score(score);
  builder_.add_age(age);
  builder_.add_obj_id(obj_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<test1> Createtest1Direct(flatbuffers::FlatBufferBuilder &_fbb,
    int64_t obj_id = 0,
    int64_t age = 0,
    double score = 0.0,
    const char *name = nullptr,
    const char *mydata = nullptr) {
  return Createtest1(_fbb, obj_id, age, score, name ? _fbb.CreateString(name) : 0, mydata ? _fbb.CreateString(mydata) : 0);
}

inline flatbuffers::Offset<test1> Createtest1(flatbuffers::FlatBufferBuilder &_fbb, const test1T *_o);

inline std::unique_ptr<test1T> test1::UnPack() const {
  auto _o = new test1T();
  { auto _e = obj_id(); _o->obj_id = _e; };
  { auto _e = age(); _o->age = _e; };
  { auto _e = score(); _o->score = _e; };
  { auto _e = name(); if (_e) _o->name = _e->str(); };
  { auto _e = mydata(); if (_e) _o->mydata = _e->str(); };
  return std::unique_ptr<test1T>(_o);
}

inline flatbuffers::Offset<test1> Createtest1(flatbuffers::FlatBufferBuilder &_fbb, const test1T *_o) {
  return Createtest1(_fbb,
    _o->obj_id,
    _o->age,
    _o->score,
    _o->name.size() ? _fbb.CreateString(_o->name) : 0,
    _o->mydata.size() ? _fbb.CreateString(_o->mydata) : 0);
}

inline const kvstore::test1 *Gettest1(const void *buf) { return flatbuffers::GetRoot<kvstore::test1>(buf); }

inline test1 *GetMutabletest1(void *buf) { return flatbuffers::GetMutableRoot<test1>(buf); }

inline bool Verifytest1Buffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<kvstore::test1>(nullptr); }

inline void Finishtest1Buffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<kvstore::test1> root) { fbb.Finish(root); }

}  // namespace kvstore

#endif  // FLATBUFFERS_GENERATED_KVSTORETEST1_KVSTORE_H_
